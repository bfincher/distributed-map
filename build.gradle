buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
  }
}

plugins {
    id "net.researchgate.release" version "2.6.0"
    id "checkstyle"
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "jacoco"
apply plugin: "net.researchgate.release"

group = 'com.fincher'
description "Distributed Map"

def baseNexusUrl = "http://192.168.1.2:8082/nexus/content/"

repositories {
  mavenLocal()
  maven {
        url "${baseNexusUrl}groups/public"
  }
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

dependencies {
  implementation 'com.google.protobuf:protobuf-java:3.11.4'
  
  implementation 'com.google.guava:guava:29.0-jre'
  implementation 'com.fincher:io-channel:2.0.2-SNAPSHOT'
  implementation 'org.apache.logging.log4j:log4j-api:2.13.1'
  implementation 'org.apache.logging.log4j:log4j-core:2.13.1'

  testCompile 'junit:junit:4.13'
  testCompile 'org.mockito:mockito-core:3.3.3'
  testCompile 'org.awaitility:awaitility:4.0.1'
}

test {
    forkEvery 1
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  /*
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
  }
  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
  */
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
        }
    }

    repositories {
        maven {
            credentials {
                username = "upload"
                password = "upload"
            }
        
            if (project.version.endsWith('-SNAPSHOT')) {
                url "${baseNexusUrl}repositories/snapshots"
            } else {
                url "${baseNexusUrl}repositories/releases"
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

/*
checkstyle {
    configFile file("config/checkstyle/checkstyle.xml")
}
*/

release {
    git {
        requireBranch = ''
    }
}
