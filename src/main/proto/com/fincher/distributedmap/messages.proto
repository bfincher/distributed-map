syntax = "proto3";
option java_multiple_files = true;
package com.fincher.distributedmap;

message Register {
    string mapName = 1;
    string keyType = 2;
    string valueType = 3;
    int32 lastMapTransId = 4;
    string uuid = 5;
}


message RegisterResponse {
    string mapName = 1;
    bool registrationSuccess = 2;
    string failureReason = 3;
}


message DeRegister {
    string mapName = 1;
    string keyType = 2;
    string valueType = 3;
    string uuid = 4;
}

message RequestKeyLock {
    string mapName = 1;
    bytes key = 2;
    int32 latestTransId = 3;
    string uuid = 4;
}

message RequestKeyLockResponse {
    string mapName = 1;
    bytes key = 2;
    bool lockAcquired = 3;
}

message ReleaseKeyLock {
    string mapName = 1;
    bytes key = 2;
    string uuid = 3;
    int32 latestTransId = 4;
}

message RequestMapLock {
    string mapName = 1;
    string uuid = 2;
    int32 latestTransId = 3;
}

message RequestMapLockResponse {
    string mapName = 1;
    bool lockAcquired = 2;
}

message ReleaseMapLock {
    string mapName = 1;
    string uuid = 2;
}

enum TransactionType {
    UPDATE = 0;
    DELETE = 1;
}

message Transaction {
    int32 keyTransactionId = 1;
    bytes key = 2;
    bytes value = 3;
    TransactionType transType = 4;
}

message ClientTransactionUpdate {
    string mapName = 1;
    repeated Transaction transactions = 2;
    uint32 mapTransactionId = 3;
};

message RequestMapChange {
    string mapName = 1;
    string uuid = 2;
    Transaction transaction = 3;
}

message RequestMapChangeResponse {
    string mapName = 1;
    Transaction transaction = 2;
    bool updateSuccess = 3;
    
    enum FailureReason {
        MAP_DOES_NOT_EXIST = 0;
        MAP_OUT_OF_DATE = 1;
        KEY_NOT_LOCKED = 2;
    }
    
    FailureReason failureReason = 4;
}

message ClientToServerMessage {
    oneof msg {
        Register register = 1;
        DeRegister deRegister = 2;
        RequestKeyLock requestKeyLock = 3;
        ReleaseKeyLock releaseKeyLock = 4;
        RequestMapLock requestMapLock = 5;
        ReleaseMapLock releaseMapLock = 6;
        RequestMapChange requestMapChange = 7;
    }
}

message ServerToClientMessage {
    oneof msg {
        RequestKeyLockResponse requestKeyLockResponse = 1;
        RequestMapLockResponse requestMapLockResponse = 2;
        ClientTransactionUpdate clientTransactionUpdate = 3;
        RequestMapChangeResponse requestMapChangeResponse = 4;
    }
}